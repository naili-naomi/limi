BookCard.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/BookCard.jsx):
import React, { useState, useEffect } from 'react';
import { fetchBookCover } from '../services/googleBooksApiService';
import './ListGroup.css';

const BookCard = ({ item, onSelectItem }) => {
  const [coverUrl, setCoverUrl] = useState(null);
  const placeholderUrl = 'https://via.placeholder.com/150x225.png?text=No+Cover';

  useEffect(() => {
    const getCover = async () => {
      const url = await fetchBookCover(item.title);
      setCoverUrl(url);
    };
    getCover();
  }, [item.title]);

  return (
    <li className="list-group-item" onClick={() => onSelectItem(item)}>
      <img src={coverUrl || placeholderUrl} alt={`${item.title} cover`} className="book-cover" />
      <div className="book-card-content">
        <h3 className="book-title">{item.title}</h3>
        <p className="book-author">{item.author}</p>
      </div>
    </li>
  );
};

export default BookCard;


Footer.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/Footer.jsx):


Header.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/Header.jsx):


ListGroup.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/ListGroup.css):
/* src/components/ListGroup.css */
.list-group-container {
  padding: 1rem;
  background-color: #EFE9D4;
}

.list-group-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 1rem;
  list-style: none;
  padding: 0;
  margin: 0;
}

.list-group-item {
  background: #dfd8be; /* Fundo do card */
  border: 1px solid #dddddd; /* Borda do card */
  border-radius: 8px;
  overflow: hidden;
  transition: transform 0.2s, box-shadow 0.2s;
  cursor: pointer;
}

.list-group-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0,0,0,0.12);
  background-color: #9a0b46;
}

.list-group-item:hover .book-title,
.list-group-item:hover .book-author {
  color: #ffffff;
}

.list-group-item .book-cover {
  width: 100%;
  height: 225px;
  object-fit: cover;
}

.list-group-item .book-cover-placeholder {
  width: 100%;
  height: 225px;
  background-color: #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #aaa;
  font-size: 0.8rem;
}

.list-group-item .book-card-content {
  padding: 0.75rem;
}

.list-group-item .book-title {
  font-size: 1rem;
  font-weight: 600;
  color: #222; /* Cor do título do livro */
  margin: 0 0 0.25rem 0;
}

.list-group-item .book-author {
  font-size: 0.875rem;
  color: #666; /* Cor do autor */
  margin: 0;
}


ListGroup.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/ListGroup.jsx):
import React from 'react';
import BookCard from './BookCard';
import './ListGroup.css';
import { useNavigate } from 'react-router-dom';

function ListGroup({ items, heading }) {
  const navigate = useNavigate();

  const handleSelectItem = (item) => {
    navigate(`/book/${item.title}`);
  };

  return (
    <div className="list-group-container">
      <h1>{heading}</h1>
      {items.length === 0 && <p>No items found</p>}
      <ul className="list-group-grid">
        {items.map((item, index) => (
          <BookCard key={index} item={item} onSelectItem={handleSelectItem} />
        ))}
      </ul>
    </div>
  );
}

export default ListGroup;


ReviewSection.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/ReviewSection.css):
/* src/components/ReviewSection.css */
.review-section-container {
  margin-top: 2rem;
  padding: 1.5rem;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  width: 100%; /* Occupy full width */
}

.review-section-container h3 {
  color: #a30045;
  margin-bottom: 1rem;
  text-align: center;
}

.average-rating {
  text-align: center;
  font-size: 1.2rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 1.5rem;
}

.star-rating-display {
  display: inline-block;
  margin-left: 0.5rem;
}

.reviews-list {
  max-height: 300px;
  overflow-y: auto;
  border-bottom: 1px solid #eee;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
}

.review-item {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 1rem;
  margin-bottom: 1rem;
}

.review-item p {
  margin: 0 0 0.5rem 0;
  color: #555;
}

.review-item strong {
  color: #a30045;
}

.review-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.review-form h4 {
  color: #a30045;
  margin-bottom: 0.5rem;
}

.rating-input {
  display: flex;
  justify-content: center;
  font-size: 2rem;
  cursor: pointer;
}

.star-empty {
  color: #ccc;
}

.star-filled {
  color: #ffc107; /* Gold color for filled stars */
}

.review-form textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
  resize: vertical;
}

.review-form button {
  background-color: #a30045;
  color: white;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.review-form button:hover {
  background-color: #8a003a;
}

.login-prompt {
  text-align: center;
  color: #777;
  font-style: italic;
}


ReviewSection.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/components/ReviewSection.jsx):
import React, { useState, useEffect } from 'react';
import './ReviewSection.css';

function ReviewSection({ bookTitle, isLoggedIn }) {
  const [reviews, setReviews] = useState([]);
  const [newReviewText, setNewReviewText] = useState('');
  const [newReviewRating, setNewReviewRating] = useState(0);
  const [averageRating, setAverageRating] = useState(0);

  useEffect(() => {
    // In a real application, you would fetch reviews for bookTitle from your backend
    // For now, we'll use mock data
    const mockReviews = [
      { id: 1, user: 'User1', rating: 4, comment: 'Great book!' },
      { id: 2, user: 'User2', rating: 5, comment: 'Loved it!' },
      { id: 3, user: 'User3', rating: 3, comment: 'It was okay.' },
    ];
    setReviews(mockReviews);
  }, [bookTitle]);

  useEffect(() => {
    if (reviews.length > 0) {
      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
      setAverageRating(totalRating / reviews.length);
    } else {
      setAverageRating(0);
    }
  }, [reviews]);

  const handleReviewSubmit = (e) => {
    e.preventDefault();
    if (newReviewText.trim() === '' || newReviewRating === 0) {
      alert('Please provide a rating and a comment.');
      return;
    }

    const newReview = {
      id: reviews.length + 1,
      user: 'CurrentUser', // Replace with actual logged-in user
      rating: newReviewRating,
      comment: newReviewText,
    };

    setReviews([...reviews, newReview]);
    setNewReviewText('');
    setReviewRating(0);
  };

  const renderStars = (rating) => {
    return (
      <div className="star-rating-display">
        {[...Array(5)].map((_, i) => (
          <span key={i} className={i < rating ? 'star-filled' : 'star-empty'}>★</span>
        ))}
      </div>
    );
  };

  return (
    <div className="review-section-container">
      <h3>Reviews</h3>
      <div className="average-rating">
        Average Rating: {averageRating.toFixed(1)} / 5 {renderStars(averageRating)}
      </div>
      <div className="reviews-list">
        {reviews.map((review) => (
          <div key={review.id} className="review-item">
            <p><strong>{review.user}</strong> {renderStars(review.rating)}</p>
            <p>{review.comment}</p>
          </div>
        ))}
      </div>

      {isLoggedIn ? (
        <form onSubmit={handleReviewSubmit} className="review-form">
          <h4>Add Your Review</h4>
          <div className="rating-input">
            {[1, 2, 3, 4, 5].map((star) => (
              <span
                key={star}
                className={star <= newReviewRating ? 'star-filled' : 'star-empty'}
                onClick={() => setNewReviewRating(star)}
              >
                ★
              </span>
            ))}
          </div>
          <textarea
            placeholder="Write your review..."
            value={newReviewText}
            onChange={(e) => setNewReviewText(e.target.value)}
            rows="4"
          ></textarea>
          <button type="submit">Submit Review</button>
        </form>
      ) : (
        <p className="login-prompt">Please log in to add a review.</p>
      )}
    </div>
  );
}

export default ReviewSection;


AddBookPage.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/AddBookPage.css):
/* src/pages/AddBookPage.css */
.add-book-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #EFE9D4;
}

.add-book-form {
  background: #FFFFFF;
  padding: 2.5rem;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 600px;
}

.add-book-form h2 {
  color: #a30045;
  margin-bottom: 2rem;
  text-align: center;
  font-weight: 700;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #555;
  font-weight: 600;
}

.form-group input[type="text"],
.form-group input[type="number"],
.form-group textarea {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.form-group textarea {
  resize: vertical;
}

.btn-add-book {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 5px;
  background-color: #a30045;
  color: white;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-add-book:hover {
  background-color: #8a003a;
}

.error-message {
  color: #c00;
  background: #fee;
  border: 1px solid #fcc;
  padding: 0.6rem;
  border-radius: 5px;
  margin-bottom: 1rem;
  text-align: center;
}

.success-message {
  color: #2c662d;
  background: #eef8ee;
  border: 1px solid #b9e2b3;
  padding: 0.6rem;
  border-radius: 5px;
  margin-bottom: 1rem;
  text-align: center;
}


AddBookPage.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/AddBookPage.jsx):
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { addBook } from '../api';
import './AddBookPage.css';

function AddBookPage() {
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [publicationYear, setPublicationYear] = useState('');
  const [synopsis, setSynopsis] = useState('');
  const [genres, setGenres] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    const token = localStorage.getItem('token');
    if (!token) {
      setError('Você precisa estar logado para adicionar um livro.');
      return;
    }

    const bookData = {
      titulo: title,
      autor: author,
      anoPublicacao: parseInt(publicationYear),
      sinopse: synopsis,
      generos: genres.split(',').map(g => g.trim()),
    };

    try {
      await addBook(bookData, token);
      setSuccess('Livro adicionado com sucesso!');
      setTitle('');
      setAuthor('');
      setPublicationYear('');
      setSynopsis('');
      setGenres('');
      navigate('/'); // Redirect to home or book details page
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="add-book-container">
      <div className="add-book-form">
        <h2>Adicionar Novo Livro</h2>
        {error && <div className="error-message">{error}</div>}
        {success && <div className="success-message">{success}</div>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="title">Título:</label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="author">Autor:</label>
            <input
              id="author"
              type="text"
              value={author}
              onChange={(e) => setAuthor(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="publicationYear">Ano de Publicação:</label>
            <input
              id="publicationYear"
              type="number"
              value={publicationYear}
              onChange={(e) => setPublicationYear(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="synopsis">Sinopse:</label>
            <textarea
              id="synopsis"
              value={synopsis}
              onChange={(e) => setSynopsis(e.target.value)}
              rows="5"
              required
            ></textarea>
          </div>
          <div className="form-group">
            <label htmlFor="genres">Gêneros (separados por vírgula):</label>
            <input
              id="genres"
              type="text"
              value={genres}
              onChange={(e) => setGenres(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn-add-book">Adicionar Livro</button>
        </form>
      </div>
    </div>
  );
}

export default AddBookPage;


BookDetailsPage.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/BookDetailsPage.css):
/* src/pages/BookDetailsPage.css */
.book-details-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 80vh;
  padding: 1rem; /* Reduced padding */
  background-color: #f5f6fa;
}

.book-details-card {
  display: flex;
  background: #ffffff;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  width: 100%; /* Occupy full width */
  margin-bottom: 1rem; /* Add some space below the card */
}

.book-details-cover {
  width: 300px;
  height: auto;
  object-fit: cover;
  flex-shrink: 0;
}

.book-details-content {
  padding: 2rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.book-details-title {
  font-size: 2rem;
  color: #a30045;
  margin-bottom: 0.5rem;
}

.book-details-author {
  font-size: 1.2rem;
  color: #666;
  margin-bottom: 1.5rem;
}

.book-details-info {
  font-size: 1rem;
  color: #555;
  margin-bottom: 0.5rem;
}

.book-details-synopsis {
  font-size: 0.95rem;
  color: #444;
  line-height: 1.6;
  margin-top: 1rem;
}

.book-details-loading,
.book-details-error,
.book-details-not-found {
  text-align: center;
  font-size: 1.2rem;
  color: #777;
  padding: 2rem;
}


BookDetailsPage.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/BookDetailsPage.jsx):
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getLivroById } from '../api';
import ReviewSection from '../components/ReviewSection';
import './BookDetailsPage.css';

function BookDetailsPage() {
  const { id } = useParams();
  const [bookDetails, setBookDetails] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false); // State to track login status

  useEffect(() => {
    // Check login status (e.g., from localStorage or context)
    const token = localStorage.getItem('token');
    setIsLoggedIn(!!token);

    const getBookDetails = async () => {
      try {
        setLoading(true);
        const details = await getLivroById(id);
        if (details) {
          setBookDetails(details);
        } else {
          setError('Book details not found.');
        }
      } catch (err) {
        setError('Error fetching book details.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      getBookDetails();
    }
  }, [id]);

  if (loading) {
    return <div className="book-details-loading">Loading book details...</div>;
  }

  if (error) {
    return <div className="book-details-error">Error: {error}</div>;
  }

  if (!bookDetails) {
    return <div className="book-details-not-found">No book details available.</div>;
  }

  return (
    <div className="book-details-container">
      <div className="book-details-card">
        <img src={bookDetails.urlImagem || 'https://via.placeholder.com/150x225.png?text=No+Cover'} alt={`${bookDetails.titulo} cover`} className="book-details-cover" />
        <div className="book-details-content">
          <h2 className="book-details-title">{bookDetails.titulo}</h2>
          <h3 className="book-details-author">by {bookDetails.autor}</h3>
          <p className="book-details-info"><strong>Published:</strong> {bookDetails.anoPublicacao}</p>
          <p className="book-details-synopsis">{bookDetails.sinopse}</p>
        </div>
      </div>
      <ReviewSection bookTitle={bookDetails.titulo} isLoggedIn={isLoggedIn} />
    </div>
  );
}

export default BookDetailsPage;

ForgotPassword.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/ForgotPassword.css):
/* src/pages/ForgotPassword.css */
.forgot-password-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #EFE9D4;
}

.forgot-password-form {
  background: #FFFFFF;
  padding: 2.5rem;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
}

.forgot-password-form h2 {
  color: #a30045;
  margin-bottom: 2rem;
  text-align: center;
  font-weight: 700;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #555;
  font-weight: 600;
}

.form-group input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.btn-forgot-password {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 5px;
  background-color: #a30045;
  color: white;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-forgot-password:hover {
  background-color: #8a003a;
}

.forgot-password-links {
  margin-top: 1.5rem;
  text-align: center;
}

.forgot-password-links a {
  color: #a30045;
  text-decoration: none;
}

.forgot-password-links a:hover {
  text-decoration: underline;
}


ForgotPassword.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/ForgotPassword.jsx):
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './ForgotPassword.css';

function ForgotPassword() {
  const [email, setEmail] = useState('');
  const [msg, setMsg] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!email) {
      setError('Por favor, informe seu e-mail.');
      return;
    }
    setError('');
    setMsg('Se esse e-mail estiver cadastrado, você receberá instruções para resetar a senha.');
  };

  return (
    <div className="forgot-password-container">
      <div className="forgot-password-form">
        <h2>Recuperar senha</h2>
        {error && <div className="error-message">{error}</div>}
        {msg && <div className="success-message">{msg}</div>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="forgot-email">Email:</label>
            <input
              id="forgot-email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn-forgot-password">Enviar instruções</button>
        </form>
        <div className="forgot-password-links">
          <Link to="/login">Voltar ao login</Link>
        </div>
      </div>
    </div>
  );
}

export default ForgotPassword;


Home.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/Home.jsx):
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ListGroup from '../components/ListGroup';
import { getLivros } from '../api';

function Home() {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const data = await getLivros();
        setBooks(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  const handleSelectItem = (book) => {
    navigate(`/livros/${book.id}`);
  };

  if (loading) {
    return <div>Carregando...</div>;
  }

  if (error) {
    return <div>Erro: {error}</div>;
  }

  return (
    <div>
      <ListGroup
        items={books}
        heading="Catálogo"
        onSelectItem={handleSelectItem}
      />
    </div>
  );
}

export default Home;

Login.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/Login.css):
/* src/pages/Login.css */
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #EFE9D4; /* Cor de fundo principal */
}

.login-form {
  background: #FFFFFF;
  padding: 2.5rem;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
}

.login-form h2 {
  color: #a30045; /* Cor principal */
  margin-bottom: 2rem;
  text-align: center;
  font-weight: 700;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #555;
  font-weight: 600;
}

.form-group input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.btn-login {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 5px;
  background-color: #a30045; /* Cor principal */
  color: white;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-login:hover {
  background-color: #8a003a; /* Tom mais escuro para hover */
}

.login-links {
  margin-top: 1.5rem;
  text-align: center;
}

.login-links a {
  color: #a30045; /* Cor principal */
  text-decoration: none;
  margin: 0 0.5rem;
}

.login-links a:hover {
  text-decoration: underline;
}


Login.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/Login.jsx):
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { loginUsuario } from '../api';
import './Login.css';

function Login({ onLogin }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!email || !password) {
      setError('Preencha todos os campos.');
      return;
    }
    setError('');

    try {
      const { token, nome } = await loginUsuario({ email, senha: password });
      onLogin({ token, nome });

      navigate('/');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="login-container">
      <div className="login-form">
        <h2>Login</h2>
        {error && <div className="error-message">{error}</div>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="login-email">Email:</label>
            <input
              id="login-email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="login-password">Senha:</label>
            <input
              id="login-password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn-login">Entrar</button>
        </form>
        <div className="login-links">
          <Link to="/forgot-password">Esqueci a senha</Link>
          <span>|</span>
          <Link to="/signup">Cadastre-se</Link>
        </div>
      </div>
    </div>
  );
}

export default Login;


SignUp.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/SignUp.css):
/* src/pages/SignUp.css */
.signup-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #EFE9D4;
}

.signup-form {
  background: #FFFFFF;
  padding: 2.5rem;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
}

.signup-form h2 {
  color: #a30045;
  margin-bottom: 2rem;
  text-align: center;
  font-weight: 700;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #555;
  font-weight: 600;
}

.form-group input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.btn-signup {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 5px;
  background-color: #a30045;
  color: white;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-signup:hover {
  background-color: #8a003a;
}

.signup-links {
  margin-top: 1.5rem;
  text-align: center;
}

.signup-links a {
  color: #a30045;
  text-decoration: none;
}

.signup-links a:hover {
  text-decoration: underline;
}


SignUp.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/pages/SignUp.jsx):
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { cadastrarUsuario } from '../api';
import './SignUp.css';

function SignUp({ onSignUp }) {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name || !email || !password) {
      setError('Preencha todos os campos.');
      return;
    }
    setError('');

    try {
      await cadastrarUsuario({
        nome: name,
        username: name.toLowerCase().replace(/\s+/g, ''),
        email,
        senha: password
      });
      navigate('/login');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="signup-container">
      <div className="signup-form">
        <h2>Cadastro</h2>
        {error && <div className="error-message">{error}</div>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="signup-name">Nome:</label>
            <input
              id="signup-name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="signup-email">Email:</label>
            <input
              id="signup-email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="signup-password">Senha:</label>
            <input
              id="signup-password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn-signup">Cadastrar</button>
        </form>
        <div className="signup-links">
          <p>Já tem conta? <Link to="/login">Faça login</Link></p>
        </div>
      </div>
    </div>
  );
} 

export default SignUp;


googleBooksApiService.js (em /home/naili/IdeaProjects/limi/limi-frontend/src/services/googleBooksApiService.js):
const API_URL = 'https://www.googleapis.com/books/v1/volumes';

export const fetchBookCover = async (title) => {
  try {
    const response = await fetch(`${API_URL}?q=intitle:${encodeURIComponent(title)}&maxResults=1`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    if (data.items && data.items.length > 0) {
      const book = data.items[0];
      return book.volumeInfo.imageLinks?.thumbnail || null;
    }
    return null;
  } catch (error) {
    console.error('Error fetching book cover:', error);
    return null;
  }
};

export const fetchBookDetails = async (title) => {
  try {
    const response = await fetch(`${API_URL}?q=intitle:${encodeURIComponent(title)}&maxResults=1`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    if (data.items && data.items.length > 0) {
      const book = data.items[0];
      const volumeInfo = book.volumeInfo;
      return {
        title: volumeInfo.title,
        author: volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown',
        publishedDate: volumeInfo.publishedDate || 'N/A',
        publisher: volumeInfo.publisher || 'N/A',
        pageCount: volumeInfo.pageCount || 'N/A',
        synopsis: volumeInfo.description || 'No synopsis available.',
        cover: volumeInfo.imageLinks?.thumbnail || null,
      };
    }
    return null;
  } catch (error) {
    console.error('Error fetching book details:', error);
    return null;
  }
};


api.js (em /home/naili/IdeaProjects/limi/limi-frontend/src/api.js):
const API_BASE = 'http://localhost:8080';

export async function cadastrarUsuario({ nome, username, email, senha }) {
  const response = await fetch(`${API_BASE}/usuarios/cadastro`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome, username, email, senha })
  });

  if (!response.ok) {
    const data = await response.json().catch(() => ({}));
    throw new Error(data.error || 'Erro ao cadastrar usuário');
  }

  return await response.json();
}

export async function loginUsuario({ email, senha }) {
  const response = await fetch(`${API_BASE}/usuarios/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, senha })
  });

  if (!response.ok) {
    const data = await response.json().catch(() => ({}));
    throw new Error(data.error || 'Erro no login');
  }

  return await response.json(); // deve conter { token: "..." }
}

export async function addBook(bookData, token) {
  const response = await fetch(`${API_BASE}/livros`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(bookData)
  });

  if (!response.ok) {
    const data = await response.json().catch(() => ({}));
    throw new Error(data.error || 'Erro ao adicionar livro');
  }

  return await response.json();
}

export async function getLivros() {
  const response = await fetch(`${API_BASE}/livros`);
  if (!response.ok) {
    throw new Error('Erro ao buscar livros');
  }
  return await response.json();
}

export async function getLivroById(id) {
  const response = await fetch(`${API_BASE}/livros/${id}`);
  if (!response.ok) {
    throw new Error('Erro ao buscar detalhes do livro');
  }
  return await response.json();
}


App.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/App.css):
@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');


* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.app-container {
  font-family: 'Segoe UI', Arial, sans-serif;
  background: #EFE9D4;
  min-height: 10%;
    align-items: center;
}

.app-container header{
  background: #EFE9D4;
  border-color: #ddd;
  display: flex;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid #ddd;
}

.app-container footer {
  border-top: 1px solid #ddd;
  justify-content: center;
  background: #6B002C;
  padding: 1rem;
  text-align: center;
  font-size: 14px;
  color: bisque;
}

main {
  padding: 2rem 1rem;
}

h1 {
  color: #222;
}

.app-container header img {
  height: 110px;
  border-radius: 8px;
  transition: transform 0.3s;
}

.app-container header img:hover {
  transform: scale(1.05);
}

.search-form {
  display: flex;
  align-items: center;
  margin-left: 2rem;
  gap: 0.5rem;
  height: 10%;
}

.search-input {
  padding: 0.4rem 0.8rem;
  border: 1px solid #ccc;
  border-radius: 10px;
  flex-grow: 1;
  width: 40rem;
  height: 3rem;
  background-color: rgba(222, 217, 198, 0.756);
}

.search-btn {
  padding: 0.4rem 1rem;
  background: #6B002C;
  color: #fff;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  height: 3rem;
}

.search-btn:hover {
  background: #a30045;
  color: #fff;
  box-shadow: 0 2px 8px rgba(107, 0, 44, 0.15);
  transition: background 0.1s, box-shadow 0.2s;
}

.titulo {
  font-size: 24px;
  margin: 0;
}

.titulo-link {
  text-decoration: none;
  color: #222;
}

.nav-header {
  margin-left: auto;
  margin-right: 1rem;
  display: flex;
  gap: 1rem;
  align-items: center;
}

.nav-link {
  color: #6B002C;
  text-decoration: none;
  font-weight: 500;
  font-size: 20px;
  padding: 0rem 0.2rem;
  border-radius: 4px;
  transition: background 0.1s;
}

h3{
  color: #fff;
  font-size: 1.5rem;
}
.nav-link:hover {
  color: #9a0b46;
}

.nav-bemvindo {
  color: #333;
}

.nav-sair {
  background: none;
  border: none;
  color: #5674fc;
  cursor: pointer;
}

App.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/App.jsx):
// src/App.jsx
import React, { useEffect, useState } from 'react';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
import './App.css';
import Home from './pages/Home';
import Login from './pages/Login';
import SignUp from './pages/SignUp';
import ListGroup from './components/ListGroup';
import ForgotPassword from './pages/ForgotPassword';
import BookDetailsPage from './pages/BookDetailsPage';
import AddBookPage from './pages/AddBookPage';
import logo from './assets/logo_horizontal_transparente.png';

function App() {
  const [logado, setLogado] = useState(false);
  const [nome, setNome] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('token');
    const nomeSalvo = localStorage.getItem('nome');
    if (token && nomeSalvo) {
      setLogado(true);
      setNome(nomeSalvo);
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('nome');
    setLogado(false);
    setNome('');
    navigate('/login');
  };

  const handleLogin = ({ token, nome }) => {
    localStorage.setItem('token', token);
    localStorage.setItem('nome', nome);
    setLogado(true);
    setNome(nome);
  };

  const handleSignUp = ({ name, email, password }) => {
    if (email !== 'jaexiste@dominio.com') {
      return true;
    }
    return false;
  };

  const handleLoginSuccess = (token, nomeDoUsuario) => {
    localStorage.setItem('token', token);
    localStorage.setItem('nome', nomeDoUsuario);
    setLogado(true);
    setNome(nomeDoUsuario);
    navigate('/'); // redireciona pra home ou onde quiser
  };

  const items = [
    { title: "Livro 1", image: "https://via.placeholder.com/240x320" },
    { title: "Livro 2" }, // sem imagem, usará o placeholder
    { title: "Livro 3", image: "https://via.placeholder.com/240x320" },
    { title: "Livro 1", image: "https://via.placeholder.com/240x320" },
    { title: "Livro 2" }, // sem imagem, usará o placeholder
    { title: "Livro 3", image: "https://via.placeholder.com/240x320" }
  ];

  return (
    <div className="app-container">
      {/* ======= HEADER ======= */}
      <header>
        <Link to="/">
          <img
            src={logo}
            alt="Logo"
            className="logo"
          />
        </Link>

        {/* ======= BARRA DE PESQUISA ======= */}
        <form className="search-form" onSubmit={e => { e.preventDefault(); /* Adicione lógica de busca aqui */ }}>
          <input
            type="text"
            className="search-input"
            placeholder="Pesquisar livros..."
            // value={searchTerm}
            // onChange={e => setSearchTerm(e.target.value)}
          />
          <button type="submit" className="search-btn">Buscar</button>
        </form>

        {/* ======= NAVEGAÇÃO DINÂMICA ======= */}
        <nav className="nav-header">
          {!logado ? (
            <>
              <Link to="/login" className="nav-link" style={{ color: '#a30045' }}>
                Login
              </Link>
              <h3> | </h3>
              <Link to="/signup" className="nav-link" style={{ color: '#a30045' }}>
                Cadastro
              </Link>
            </>
          ) : (
            <>
              <span className="nav-bemvindo">Bem-vindo, {nome}</span>
              <Link to="/add-book" className="nav-link" style={{ color: '#a30045' }}>
                Adicionar Livro
              </Link>
              <button onClick={handleLogout} className="nav-sair">
                Sair
              </button>
            </>
          )}
        </nav>
      </header>

      {/* ======= ROTAS ======= */}
      <main style={{ minHeight: '70vh', padding: '2rem 1rem' }}>
        <Routes>
          <Route path="/" element={<Home items={items} />} />
          <Route path="/login" element={<Login onLogin={handleLogin} />} />
          <Route path="/signup" element={<SignUp onSignUp={handleSignUp} />} />
          <Route path="/forgot-password" element={<ForgotPassword />} />
          <Route path="/book/:title" element={<BookDetailsPage />} />
          <Route path="/add-book" element={<AddBookPage />} />
        </Routes>
      </main>

      {/* ======= FOOTER ======= */}
      <footer >
        © {new Date().getFullYear()} Limi. Todos os direitos reservados.
      </footer>
    </div>
  );
}

export default App;


index.css (em /home/naili/IdeaProjects/limi/limi-frontend/src/index.css):


main.jsx (em /home/naili/IdeaProjects/limi/limi-frontend/src/main.jsx):
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import 'bootstrap/dist/css/bootstrap.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)


